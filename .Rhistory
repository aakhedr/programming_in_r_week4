}
best("BB", "heart attack")
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
#         if (matched == NULL) {
#                 return(paste("Error in best('", state, "', '", string,
#                              "'): invalid outcome", sep=""))
#         }
states <- unique(data[, "State"])
if (is.element(state, states)) {
#                 return(paste("Error in best('", state, "', '",
#                              outcome, "'): invalid state", sep=""))
## return the hospital name in the state with the lowest 30 day-death
## rate
data <- subset(data, data$State==state)
}
}
best("BB", "heart attack")
best("NY", "hert attack")
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (matched == NULL) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (is.element(state, states) == FALSE) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death
## rate
data <- subset(data, data$State==state)
}
best("BB", "heart attack")
best("NY", "hert attack")
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (!matched) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (is.element(state, states) == FALSE) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death
## rate
data <- subset(data, data$State==state)
}
best("BB", "heart attack")
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
outcome <- "heart attack")
outcome <- "heart attack"
match_outcome(outcome, names)
x <- match_outcome("hert attack", names)
x
x == NULL
x != NULL
is.null(x)
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (is.element(state, states) == FALSE) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death
## rate
data <- subset(data, data$State==state)
}
best("BB", "heart attack")
best("NY", "hert attack")
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death
## rate
data <- subset(data, data$State==state)
}
best("NY", "hert attack")
best("BB", "heart attack")
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
data_subset <- subset(data, data$State=="TX")
outcome <- "heart attack"
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
matched <- match_outcome(outcome, names)
class(matched)
class(data_subset)
data_subset[order(matched), "Hospital.Name"]
class(data_subset[order(matched), "Hospital.Name"])
x <- data_subset[order(matched), "Hospital.Name"]
x
x[, matched]
x[matched]
matched
x <- data_subset[order(matched), ]
x
x <- data_subset[, order(matched)]
x <- data_subset[sort(matche), ]
x <- data_subset[sort(matched), ]
x
x <- data_subset[, sort(matched)]
class(x)
x
index <- with(data_subset, order(matched))
index
data_subset[index, ]
attach(mtcars)
head(mtcars)
newdata <- mtcars[order(mpg), ]
head(newdata)
newdata1 <- mtcars[order("mpg"), ]
names(mtcars)
names(mtcars)[1]
newdata2 <- mtcars[order(eval("mpg")), ]
newdata2 <- mtcars[order(quote("mpg")), ]
q <- "mpg"
newdata2 <- mtcars[order(eval(q)), ]
eval(q)
q <- quote(mpg)
q
z <- quote(gsub(""", "", matched))
print(content[[q]])
print(mtcars[[q]])
print(mtcars[, q])
newdata3 <- mtcars[order(q, with=FALSE), ]
q <- "mpg"
newdata3 <- mtcars[order(q, with=FALSE), ]
newdata4 <- mtcras[order("mpg", with=FALSE), ]
newdata4 <- mtcars[order("mpg", with=FALSE), ]
newdata4 <- mtcars[, order("mpg", with=FALSE)]
newdata4
newdata4 <- mtcars[order(matcars[['mpg']])]
newdata4 <- mtcars[order(mtcars[['mpg']])]
x <- mtcars[["mpg"]]
x
mtcars$mpg
?order
x <- sort.list(data_subset[, matched])
View(newdata1)
ordered2 = test[ order( test[["B"]] ) , ]
x <- data_subset[order(data_subset[[match]]), ]
x <- data_subset[, order(data_subset[[match]])]
test = data.frame(A=c(4,2,4), B=c(8,3,2))
test
ordered = test[with( test, order(A,B)) , ]
ordered
cols = c( "A" , "B" )
test
ordered2 = test[ order( test[["B"]] ) , ]
ordered2
x <- data_subset[order(data_subset[[matched]]), ]
x[1, "Hospital.Name"]
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death
## rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(ordered[1, "Hospital.Name"])
}
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
match_outcome("heart failure", names)
match_outcome("pneumonia", names)
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(ordered[1, "Hospital.Name"])
}
best("TX", "heart failure")
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
data_subset <- subset(data, data$State==state)
state <- "TX"
data_subset <- subset(data, data$State==state)
matched <- match_outcome("heart failure", names)
ordered <- data_subset[order(data_subset[[matched]]), ]
ordered[1, matched]
ordered[370, matched]
ordered[100, matched]
ordered[2, matched]
ordered[3, matched]
ordered[10, matched]
ordered[ 1:20, matched]
ordered[, ordered$Hospital.Name=="FORT DUNCAN MEDICAL CENTER"]
ordered[ordered$Hospital.Name=="FORT DUNCAN MEDICAL CENTER", ]
ordered[matched, ordered$Hospital.Name=="FORT DUNCAN MEDICAL CENTER"]
ordered[ordered$Hospital.Name=="FORT DUNCAN MEDICAL CENTER", matched]
ordered[1:4, "Hospital.Name"]
ordered[1:4, "Hospital.Name" & matched]
ordered[1:4, matched]
ordered[data$Hospital.Name, ordered[[matched]]==8.1]
ordered[, ordered[[matched]]==8.1]
ordered[ordered[[matched]]==8.1, ]
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
submit()
e
submit()
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(character(ordered[1, "Hospital.Name"]))
}
best("TX", "heart attack")
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(ordered[1, "Hospital.Name"])
}
best("TX", "heart attack")
x <- best("TX", "heart attack")
class(x)
x
x[1]
x[2]
character(x)
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(ordered[1, "Hospital.Name"])
}
best("TX", "heart attack")
x <- best("TX", "heart attack")
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(ordered[1, ordered$Hospital.Name])
}
x <- best("TX", "heart attack")
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(ordered[ordered$Hospital.Name, "Hospital.Name"])
}
x <- ordered$Hospital.Name
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(ordered[1:1, "Hospital.Name"])
}
ordered$Hospital.Name
x <- best("TX", "heart attack")
x
df <- data.frame(matrix(1:10, 5, 2))
df
df[1, X1]
df[1, "X1"]
df[5, "X2"]
x <- best("TX", "heart attack")
as.character(x)
match_outcome <- function(string, strings) {
string <- tolower(gsub(" ", ".", string))
for (i in 1:length(strings)) {
if (grepl(string, tolower(strings[i]))) {
return(strings[i])
}
}
}
best <- function(state, outcome) {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
states <- unique(data[, "State"])
if (!is.element(state, states)) {
stop("invalid state")
}
## return the hospital name in the state with the lowest 30 day-death rate
data_subset <- subset(data, data$State==state)
ordered <- data_subset[order(data_subset[[matched]]), ]
return(as.character(ordered[1:1, "Hospital.Name"]))
}
best("TX", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
